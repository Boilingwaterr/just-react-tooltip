{"version":3,"sources":["constants.js","App.js","serviceWorker.js","index.js"],"names":["defaultColors","Installation","className","Interface","style","display","flexDirection","alignItems","paddingLeft","Object","keys","map","i","console","log","width","margin","padding","BasicUsage","backgroundColor","fontSize","fontWeight","justifyContent","render","color","defaultStyle","type","position","customPosition","top","left","component","App","boxShadow","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9758df0c.chunk.js","sourcesContent":["export const defaultColors = {\r\n    \"dark\": { \"color\": \"#c1c1c1\", \"backgroundColor\": \"#424242\" },\r\n    \"light\": { \"color\": \"#424242\", \"backgroundColor\": \"#F4F4F4\" },\r\n    \"success\": { \"color\": \"#fff\", \"backgroundColor\": \"#8DC572\" },\r\n    \"darkGreen\": { \"color\": \"#c1c1c1\", \"backgroundColor\": \"#2D572C\" },\r\n    \"warning\": { \"color\": \"#000\", \"backgroundColor\": \"#E4766C\" },\r\n    \"error\": { \"color\": \"#fff\", \"backgroundColor\": \"#BE6464\" },\r\n    \"info\": { \"color\": \"#c1c1c1\", \"backgroundColor\": \"#337AB7\" },\r\n    \"lightBlue\": { \"color\": \"#713360\", \"backgroundColor\": \"#B2A5F3\" },\r\n    \"pinkMilk\": { \"color\": \"#713360\", \"backgroundColor\": \"#F594B9\" },\r\n};","import React from 'react';\nimport './App.css';\nimport Tooltip from 'just-tooltip-react';\nimport { defaultColors } from './constants.js';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <div style={{\n        display: 'flex',\n        flexDirection: 'column',\n        width: '70%',\n        backgroundColor: \"#dadada\",\n        boxShadow: '0px 1px 5px #000'\n      }}>\n        <Installation />\n        <BasicUsage />\n        <Interface />\n      </div>\n\n    </div>\n  );\n}\n\nconst Installation = () => <>\n  <h2>How to install</h2>\n  <div className=\"install\" >\n    <h5>npm install just-react-tooltip</h5>\n  </div>\n</>\n\nconst Interface = () => <div>\n  <h2>Interface</h2>\n  <div style={{\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n    paddingLeft: '15px'\n  }}>\n    <h4>type: | 'inline' | 'custom' | (defaul = 'inline')</h4>\n    <h4>render: | string |</h4>\n    <h4>component: | object |</h4>\n    <h4>position: | follower | bindToBlock | fixed |</h4>\n    <h4>customPosition: | object |</h4>\n    <h4>opacity: | 0 - 1 |</h4>\n  </div>\n  <div style={{ display: 'flex', alignItems: 'flex-start', paddingLeft: '15px' }}>\n    <h4>defaultStyle: </h4>\n  </div>\n  <div className='interface'>\n    {Object.keys(defaultColors).map(i => {\n      console.log(defaultColors[i])\n      return <div style={{ ...defaultColors[i], width: '100px', margin: '10px', padding: '10px' }}>\n        {i}\n      </div>\n    })}\n  </div>\n</div>\n\nconst BasicUsage = () => {\n  const imp = `import Tooltip from 'just-tooltip-react';`\n  const example = '<Tooltip render = \"text\" type = \"inline\" defaultStyles = \"dark\">{children}</Tooltip>';\n  return <div>\n    <h2>Basic usage</h2>\n    <div style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: 'flex-start',\n      backgroundColor: \"#F4F4F4\",\n      padding: \"10px\",\n      fontSize: \"14px\",\n      fontWeight: \"700\"\n    }}>\n      <p>{imp}</p>\n      <p>{example}</p>\n    </div>\n    <div style={{\n      display: \"flex\",\n      flexDirection: \"column\",\n    }}>\n      <div style={{\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        padding: \"15px\",\n      }}>\n        <Tooltip render=\"I am default! (:\">\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"pink\",\n            padding: \"15px\",\n            width: \"150px\",\n            color: '#132435'\n          }}>\n            default position\n          </div>\n        </Tooltip>\n        <Tooltip\n          defaultStyle=\"success\"\n          type=\"inline\"\n          position=\"bindToBlock\"\n          render=\"i'am bound :c\"\n        >\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"#2D572C\",\n            padding: \"15px\",\n            width: \"150px\"\n          }}>\n            bindToBlock\n                </div>\n        </Tooltip>\n      </div>\n      <div style={{\n        display: \"flex\",\n        justifyContent: \"space-around\",\n        padding: \"15px\",\n      }}>\n        <Tooltip\n          type=\"inline\"\n          defaultStyle=\"error\"\n          position=\"fixed\"\n          render=\"This is custom position tooltip.\"\n          customPosition={{ top: \"75%\", left: \"75%\" }}\n        >\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"#337AB7\",\n            padding: \"15px\",\n            width: \"150px\"\n          }}>\n            custom position\n        </div>\n        </Tooltip>\n        <Tooltip\n          defaultStyle=\"dark\"\n          type=\"custom\"\n          position=\"bindToBlock\"\n          component={<div\n            style={{\n              display: 'flex',\n              justifyContent: 'space-between',\n              padding: '15px',\n              backgroundColor: 'green',\n              color: 'white'\n            }}\n          >\n            <div style={{ backgroundColor: \"pink\", margin: \"5px\", padding: \"10px\" }}>custom</div>\n            <div style={{ backgroundColor: \"orange\", margin: \"5px\", padding: \"10px\" }}>tooltip</div>\n          </div>}\n        >\n          <div style={{\n            display: \"flex\",\n            justifyContent: \"center\",\n            alignItems: \"center\",\n            backgroundColor: \"#BE6464\",\n            padding: \"15px\",\n            width: \"150px\"\n          }}>\n            component\n        </div>\n        </Tooltip>\n      </div>\n    </div>\n  </div>\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}